#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE) in;
layout (binding = 0, rgba32f) uniform writeonly image2D resultImage; // TODO: HDR

layout(binding = 1) uniform UniformCameraObject {
    mat4 view;
    mat4 proj;
    vec3 cameraPosition;
} camera;

// all of these components are calculated in SkyManager.h/.cpp
layout(set = 0, binding = 2) uniform UniformSunObject {
    
    vec4 location;
    vec4 direction;
    vec4 color;
    mat4 directionBasis;
    float intensity;
} sun;

// note: a lot of sky constants are stored/precalculated in SkyManager.h / .cpp
layout(binding = 3) uniform UniformSkyObject {
    
    vec4 betaR;
    vec4 betaV;
    float mie_directional;
} sky;

layout(binding = 4) uniform sampler2D cloudPlacement;
layout(binding = 5) uniform sampler3D lowResCloudShape;

struct Intersection {
    vec3 normal;
    vec3 point;
    bool valid;
    float t;
};

#define VIS_3D_TEX
#define ATMOSPHERE_RADIUS 2000000.0

#define NUM_FBM_OCTAVES 8

#define EPSILON 0.0001
#define PI 3.14159265
#define E 2.718281828459

#define THREE_OVER_SIXTEENPI 0.05968310365946075
#define ONE_OVER_FOURPI 0.07957747154594767

#define ASPECT_RATIO dim.x / dim.y

float remap(in float value, in float oldMin, in float oldMax, in float newMin, in float newMax) {
    return newMin + (((value - oldMin) / (oldMax - oldMin)) * (newMax - newMin));
}

float hgPhase(in float cosTheta, in float g) {
    float g2 = g * g;
    float inv = 1.0 / pow(1.0 - 2.0 * g * cosTheta + g2, 1.5);
    return ONE_OVER_FOURPI * ((1.0 - g2) * inv);
}

/// ATMOSPHERE COLOR BEGIN: adapted from open source of zz85 on Github, math from Preetham Model, initially implemented by Simon Wallner and Martin Upitis
/// Credit applies to everything before ATMOSPHERE COLOR END

#define SUN_ANGULAR_COS 0.999956676946448443553574619906976478926848692873900859324

float rayleighPhase(in float cosTheta) {
    return THREE_OVER_SIXTEENPI * (1.0 + cosTheta * cosTheta);
}

vec3 getAtmosphereColorPhysical(in vec3 dir, inout vec3 sunDir) {
    vec3 color = vec3(0);

    sunDir = normalize(sun.direction.xyz); 
    vec3 sunPos = sun.location.xyz; 
    float sunE = sun.intensity; 
    vec3 BetaR = sky.betaR.xyz;   
    vec3 BetaM = sky.betaV.xyz; 

    // optical length
    float zenith = acos(max(0.0, dir.y)); // acos?
    float inverse = 1.0 / (cos(zenith) + 0.15 * pow(93.885 - ((zenith * 180.0) / PI), -1.253));
    float sR = 8.4E3 * inverse;
    float sM = 1.25E3 * inverse;

    vec3 fex = exp( -BetaR * sR + BetaM * sM);

    float cosTheta = dot(sunDir, dir);

    float rPhase = rayleighPhase(cosTheta * 0.5 + 0.5);
    vec3 betaRTheta = BetaR * rPhase;
    float mPhase = hgPhase(cosTheta, sky.mie_directional);
    vec3 betaMTheta = BetaM * mPhase;

    float yDot = 1.0 - sunDir.y;
    yDot *= yDot * yDot * yDot * yDot;
    vec3 betas = (betaRTheta + betaMTheta) / (BetaR + BetaM);
    vec3 Lin = pow(sunE * (betas) * (1.0 - fex), vec3(1.5));
    Lin *= mix(vec3(1), pow(sunE * (betas) * fex, vec3(0.5)), clamp(yDot, 0.0, 1.0));

    vec3 L0 = 0.1 * fex;

    float sunDisk = smoothstep(SUN_ANGULAR_COS, SUN_ANGULAR_COS + 0.00002, cosTheta);
    L0 += (sunE * 15000.0 * fex) * sunDisk;

    color = (Lin + L0) * 0.04 + vec3(0.0, 0.0003, 0.00075);

    // return color in HDR space
    return color;
}

vec3 getAtmosphereColor(in vec3 dir) {
    // TODO: physical algorithm
    vec3 up = mix(vec3(0.3, 0.7, 1.0), vec3(0.15, 0.65, 0.9), dir.y);
    vec3 down = vec3(0.8, 0.9, 1.0);
    float y = dir.y;
    y = smoothstep(0, 1, clamp(remap(y, 0, 0.1, 0, 1), 0, 1));
    return mix(down, up, y);
}


/// ATMOSPHERE COLOR END: see credit at BEGIN




// Compute sphere intersection
Intersection raySphereIntersection(in vec3 ro, in vec3 rd, in vec4 sphere) {
	Intersection isect;
    isect.valid = false;
    isect.point = vec3(0);
    isect.normal = vec3(0, 1, 0);
    
    // no rotation, only uniform scale, always a sphere
    ro -= sphere.xyz;
    ro /= sphere.w;
    
    float A = dot(rd, rd);
    float B = 2.0 * dot(rd, ro);
    float C = dot(ro, ro) - 0.25;
    float discriminant = B * B - 4.0 * A * C;
    
    if (discriminant < 0.0) return isect;
    float t = (-sqrt(discriminant) - B) / A * 0.5;
    if (t < 0.0) t = (sqrt(discriminant) - B) / A * 0.5;
    
    if (t >= 0.0) {
        isect.valid = true;
    	vec3 p = vec3(ro + rd * t);
        isect.normal = normalize(p);
        p *= sphere.w;
        p += sphere.xyz;
        isect.point = p;
        isect.t = length(p - ro);
    }
    
    return isect;
}

// Get the point projected to the inner atmosphere shell
vec3 getProjectedShellPoint(in vec3 pt, in vec3 center) {
    return 0.5 * ATMOSPHERE_RADIUS * normalize(pt - center) + center;
}

// Given a point, the point projected to the inner atmosphere shell, and the thickness of the shell
// return the normalized height within the shell.
float getRelativeHeight(in vec3 pt, in vec3 projectedPt, in float thickness) {
    return clamp(length(pt - projectedPt) / thickness, 0.0, 1.0);
}

// Get the blended density gradient for 3 different cloud types
// relativeHeight is normalized distance from inner to outer atmosphere shell
// cloudType is read from cloud placement blue channel
float cloudLayerDensity(float relativeHeight, float cloudType) {
    relativeHeight = clamp(relativeHeight, 0, 1);

    float cumulus = max(0.0, remap(relativeHeight, 0.0, 0.2, 0.0, 1.0) * remap(relativeHeight, 0.7, 1.0, 1.0, 0.0));
    float stratocumulus = max(0.0, remap(relativeHeight, 0.0, 0.2, 0.0, 1.0) * remap(relativeHeight, 0.2, 0.7, 1.0, 0.0)); 
    float stratus = max(0.0, remap(relativeHeight, 0.0, 0.1, 0.0, 1.0) * remap(relativeHeight, 0.2, 0.3, 1.0, 0.0)); 

    float d1 = mix(stratus, stratocumulus, clamp(cloudType * 2.0, 0.0, 1.0));
    float d2 = mix(stratocumulus, stratus, clamp((cloudType - 0.5) * 2.0, 0.0, 1.0));
    return mix(d1, d2, cloudType);
}

void main() {
    /// Extract the UV
    ivec2 dim = imageSize(resultImage); // prob better as uniform
    // TODO: half resolution reprojection
    // TODO: ? quarter resolution reprojection ?
	vec2 uv = vec2(gl_GlobalInvocationID.xy) / dim;
    
    /// Cast a ray
    // Compute screen space point from UVs
    vec2 screenPoint = uv * 2.0 - 1.0;

    // Extract camera information from uniform
    vec3 camLook = vec3(camera.view[0][2], camera.view[1][2], camera.view[2][2]);
    vec3 camRight = vec3(camera.view[0][0], camera.view[1][0], camera.view[2][0]);
    vec3 camUp = vec3(camera.view[0][1], camera.view[1][1], camera.view[2][1]);

    // Compute ray direction
    vec3 cameraPos = camera.cameraPosition;
    vec3 refPoint = cameraPos - camLook;

    const float tanFovy = 0.4142135; // TODO link camera uniform

    vec3 p = refPoint + ASPECT_RATIO * screenPoint.x * tanFovy * camRight - screenPoint.y * tanFovy * camUp; // TODO: aspect ratio as uniform

    vec3 rayDirection = normalize(p - cameraPos);

    vec3 sunDir;

    vec3 backgroundCol = getAtmosphereColorPhysical(rayDirection, sunDir);

    // It is likely we will never have an entirely unobstructed view of the horizon, so kill rays that would otherwise be executing.
    // TODO: low-res stencil check first
    if(dot(rayDirection, vec3(0, 1, 0)) < 0.0) {
        imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(backgroundCol, 1));
        return;
    }


    /// Raytrace the scene (a sphere, to become the atmosphere)
    vec3 earthCenter = cameraPos;
    earthCenter.y = -ATMOSPHERE_RADIUS * 0.5 * 0.99;
    vec4 atmosphereSphereInner = vec4(earthCenter, ATMOSPHERE_RADIUS);
    float atmosphereThickness = 0.5 * ATMOSPHERE_RADIUS * 0.01;
    vec4 atmosphereSphereOuter = vec4(earthCenter, ATMOSPHERE_RADIUS * 1.01);
    Intersection atmosphereIsectInner = raySphereIntersection(cameraPos, rayDirection, atmosphereSphereInner);
    Intersection atmosphereIsectOuter = raySphereIntersection(cameraPos, rayDirection, atmosphereSphereOuter);

    float cosTheta = dot(rayDirection, sunDir);
    float t;
    float accumDensity = 0.0;
    float transmittance = 1.0;
    float numSteps = floor(mix(32, 64, 1.0 - rayDirection.y)); // Paper lists range more like 50 - 80
    float stepSize = (atmosphereIsectOuter.t - atmosphereIsectInner.t) / numSteps;

    // TODO: need good way to randomly sample in cone
    mat3 basis = mat3(sun.directionBasis);
    vec3 samples[6] = {
        basis * vec3(0, 0.1, 0),
        basis * vec3(0, 0.5, 0),
        basis * vec3(0, 1, 0),
        basis * vec3(0, 1.5, 0),
        basis * vec3(0, 2, 0),
        basis * vec3(0, 4, 0),
    };

    float henyeyGreenstein = max(hgPhase(cosTheta, 0.6), 0.7 * hgPhase(cosTheta, 0.99 - 0.1));
    for(float t = atmosphereIsectInner.t; t < atmosphereIsectOuter.t; t += stepSize) {
        vec3 currentPos = cameraPos + t * rayDirection;
        
        vec3 currentProj = getProjectedShellPoint(currentPos, earthCenter);
        vec3 cloudInfo = texture(cloudPlacement, (currentProj.xz - cameraPos.xz) / 80000.0).xyz;
        float rHeight = getRelativeHeight(currentPos, currentProj, atmosphereThickness);

        float layerDensity = cloudLayerDensity(rHeight, cloudInfo.z);

        float density = layerDensity * max(0.0, cloudInfo.y - 0.2);

        if (density > 0.00) {
            float densityAlongLight = 0.0;

            // Sample light propogation for Beer's law in a cone towards the light
            for (int i = 0; i < 6; i++) {
                vec3 lightSamplePoint = currentPos + 6.0 * stepSize * samples[i];
                vec3 lightSamplePointProj = getProjectedShellPoint(lightSamplePoint, earthCenter);
                rHeight = getRelativeHeight(lightSamplePoint, lightSamplePointProj, atmosphereThickness);
                cloudInfo = texture(cloudPlacement, (lightSamplePointProj.xz - cameraPos.xz) / 80000.0).xyz;
                layerDensity = cloudLayerDensity(rHeight, cloudInfo.z);
                densityAlongLight += layerDensity * max(0.0, cloudInfo.y - 0.2);
            }
        
            // Beer's Law with extra / artistic light penetration, blend with front-to-back opacity     
            float beersLaw = exp(-densityAlongLight);
            // HG makes far clouds too dark, clouds away from sun dir need extra scattering
            float beersModulated = max(beersLaw, 0.7 * exp(-0.25 * densityAlongLight));

            beersLaw = sun.intensity / 5.0 * mix(beersLaw, beersModulated, -cosTheta * 0.5 + 0.5);

            transmittance = mix(transmittance, henyeyGreenstein * beersLaw , (1.0 - accumDensity));
            
        }

        accumDensity += density;         
        if(accumDensity > 0.99) {
            accumDensity = 1.0;
            break;
        }
    }

    // opacity fades to prevent hard cutoff at horizon
    // TODO: find a good way to make atmospheric haze
    accumDensity *= smoothstep(0, 1, min(1, remap(rayDirection.y, 0, 0.1, 0, 1)));
    accumDensity = min(accumDensity, 0.999);
    vec3 cSunColor = mix(sun.color.xyz, backgroundCol, 0.0);

    vec3 cloudColor = cSunColor * max(0, transmittance);

    vec4 finalColor = vec4(mix(backgroundCol, cloudColor, accumDensity), 1.0);

    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), finalColor);
}
